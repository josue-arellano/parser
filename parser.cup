import java_cup.runtime.*;

/* Preliminaries to set up and use the scanner.  */
init with {: scanner.init();              :};
scan with {: return scanner.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            _boolean, _break, _class, _double;
terminal            _else, _extends, _for, _if;
terminal            _implements, _int, _interface, _new;
terminal            _newarray, _null, _println, _readln;
terminal            _return, _string, _void, _while;
terminal            _plus, _minus, _multiplication, _division;
terminal            _mod, _less, _lessequal, _greater;
terminal            _greaterequal, _equal, _notequal, _and;
terminal            _or, _not, _assignop, _semicolon;
terminal            _comma, _period, _leftparen, _rightparen;
terminal            _leftbracket, _rightbracket, _leftbrace, _rightbrace;
terminal            _intconstant, _doubleconstant, _stringconstant;
terminal            _booleanconstant, _id;

/* Non terminals */
non terminal            Program, Decl, VariableDecl, FunctionDecl;
non terminal            ClassDecl, Variable, Type, Formals, Field;
non terminal            InterfaceDecl, Prototype, StmtBlock, Stmt;
non terminal            IfStmt, WhileStmt, ForStmt, BreakStmt;
non terminal            ReturnStmt, PrintStmt, Expr, IDList;
non terminal            Lvalue, Call, Actuals, Constant, VarRepeat;
non terminal            FieldKleene, ProtoKleene, VarDeclKleene;
non terminal            StmtKleene, ExprRepeat;

/* Precedences */
/*
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left UMINUS;
*/
/* The grammar */
Program         ::= Decl | Decl Program;
Decl            ::= VariableDecl 
                    | FunctionDecl 
                    | ClassDecl 
                    | InterfaceDecl;
IDList          ::= _id | _id _comma IDList;
VariableDecl    ::= Variable _semicolon;
Variable        ::= Type _id;
Type            ::= _int 
                    | _double 
                    | _boolean
                    | _string 
                    | Type _leftbrace _rightbrace 
                    | _id;
FunctionDecl    ::= Type _id _leftparen Formals _rightparen StmtBlock
                    | _void _id _leftparen Formals _rightparen StmtBlock;
Formals         ::= VarRepeat | ;
VarRepeat       ::= Variable | Variable VarRepeat;
ClassDecl       ::= _class _id _less _extends _id _greater _less _implements IDList _greater _leftbracket FieldKleene _rightbracket;
FieldKleene     ::= Field | Field FieldKleene | ;
Field           ::= VariableDecl
                    | FunctionDecl;
InterfaceDecl   ::= _interface _id _leftbracket ProtoKleene _rightbracket;
ProtoKleene     ::= Prototype | Prototype ProtoKleene | ;
Prototype       ::= Type _id _leftparen Formals _rightparen _semicolon
                    | _void _id _leftparen Formals _rightparen _semicolon;
StmtBlock       ::= _leftbracket VarDeclKleene StmtKleene _rightbracket;
VarDeclKleene   ::= VariableDecl | VariableDecl VarDeclKleene | ;
StmtKleene      ::= Stmt | Stmt StmtKleene | ;
Stmt            ::= _less Expr _greater _semicolon
                    | IfStmt
                    | WhileStmt
                    | ForStmt
                    | BreakStmt
                    | ReturnStmt
                    | PrintStmt
                    | StmtBlock;
IfStmt          ::= _if _leftparen Expr _rightparen Stmt _less _else Stmt _greater;
WhileStmt       ::= _while _leftparen Expr _rightparen Stmt;
ForStmt         ::= _for _leftparen _less Expr _greater _semicolon Expr _semicolon _less Expr _greater _rightparen Stmt;
BreakStmt       ::= _break _semicolon;
ReturnStmt      ::= _return _less Expr _greater _semicolon;
PrintStmt       ::= _println _rightparen ExprRepeat _comma _leftparen _semicolon;
Expr            ::= Lvalue _equal Expr
                    | Constant
                    | Lvalue
                    | Call
                    | _rightparen Expr _leftparen 
                    | Expr _plus Expr
                    | Expr _minus Expr
                    | Expr _multiplication Expr
                    | Expr _division Expr
                    | Expr _mod Expr
                    | _minus Expr
                    | Expr _less Expr
                    | Expr _lessequal Expr
                    | Expr _greater Expr
                    | Expr _greaterequal Expr
                    | Expr _equal Expr
                    | Expr _notequal Expr
                    | Expr _and Expr
                    | Expr _or Expr
                    | _not Expr _readln _leftparen _rightparen
                    | _new _leftparen _id _rightparen
                    | _newarray _leftparen _intconstant _comma Type _rightparen;
Lvalue          ::= _id
                    | Lvalue _leftbrace Expr _rightbrace 
                    | Lvalue _period _id;
Call            ::= _id _leftparen Actuals _rightparen
                    | _id _leftparen _rightparen
                    | _id _period _id _rightparen Actuals _leftparen
                    | _id _period _id _rightparen _leftparen;
Actuals         ::= ExprRepeat _comma;
ExprRepeat      ::= Expr | Expr ExprRepeat;
Constant        ::= _intconstant 
                    | _doubleconstant 
                    | _stringconstant 
                    | _booleanconstant
                    | _null;