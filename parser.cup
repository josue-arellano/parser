import java_cup.runtime.*;

/* Preliminaries to set up and use the scanner.  */
init with {: scanner.init();              :};
scan with {: return scanner.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, TIMES, DIVIDE, MOD;
terminal            UMINUS, LPAREN, RPAREN;
terminal Integer    NUMBER;

/* Non terminals */
non terminal            Program, Decl, VariableDecl, FunctionDecl;
non terminal            ClassDecl, InterfaceDecl, Variable, Type;
non terminal            FunctionDecl, Formals, ClassDecl, Field;
non terminal            InterfaceDecl, Prototype, StmtBlock, Stmt;
non terminal            IfStmt, WhileStmt, ForStmt, BreakStmt;
non terminal            ReturnStmt, PrintStmt, Expr;
non terminal Integer    expr, term, factor;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left UMINUS;

/* The grammar */
expr_list ::= expr_list expr_part | 
              expr_part;
expr_part ::= expr SEMI;
expr      ::= expr PLUS expr 
            | expr MINUS expr  
            | expr TIMES expr  
            | expr DIVIDE expr  
            | expr MOD expr 
	    | MINUS expr %prec UMINUS
            | LPAREN expr RPAREN
	    | NUMBER
	    ;
Program         ::= Decl+
Decl            ::= VariableDecl 
                    | FunctionDecl 
                    | ClassDecl 
                    | InterfaceDecl
VariableDecl    ::= Variable;
Variable        ::= Type _id
Type            ::= _int 
                    | _double 
                    | _boolean
                    | _string 
                    | Type[] 
                    | _id
FunctionDecl    ::= Type _id(Formals) StmtBlock
                    | _void _id(Formals) StmtBlock
Formals         ::= Variable+, | e_production
ClassDecl       ::= _class _id <_extends _id>  < _implements _id+, > { Field*}
Field           ::= VariableDecl
                    | FunctionDecl
InterfaceDecl   ::= _interface _id{ Prototype* }
Prototype       ::= Type _id(Formals);
                    | _void _id(Formals);
StmtBlock       ::= {VariableDecl* Stmt*}
Stmt            ::= <Expr> ;
                    | IfStmt
                    | WhileStmt
                    | ForStmt
                    | BreakStmt
                    | ReturnStmt
                    | PrintStmt
                    | StmtBlock 
IfStmt          ::= _if (Expr) Stmt <else Stmt>
WhileStmt       ::= _while (Expr) Stmt
ForStmt         ::= _for ( <Expr>; Expr; <Expr> ) Stmt
BreakStmt       ::= _break;
ReturnStmt      ::= _return <Expr>;
PrintStmt       ::= _println(Expr+,);
Expr            ::= Lvalue = Expr
                    | Constant
                    | Lvalue
                    | Call
                    | (Expr) 
                    | Expr + Expr
                    | Expr â€“ Expr
                    | Expr * Expr
                    | Expr / Expr
                    | Expr % Expr
                    | -Expr
                    | Expr < Expr
                    | Expr <= Expr
                    | Expr > Expr
                    | Expr >= Expr
                    | Expr == Expr
                    | Expr != Expr
                    | Expr && Expr
                    | Expr || Expr
                    | !Expr readln ()
                    | new ( _id ) 
                    | newarray (intconstant, Type)
Lvalue          ::= _id
                    | Lvalue[Expr] 
                    | Lvalue. _id
Call            ::= _id ( Actuals) 
                    | id . id ( Actuals)
Actuals         ::= Expr+, | e_production
Constant        ::= intconstant 
                    | doubleconstant 
                    | stringconstant 
                    | booleanconstant
                    | null